<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE web-app 
    PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" 
    "http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>


    <!-- General description of your web application -->

    <display-name>Noisy Program</display-name>
    <description>
      This is version 1. of an application to perform
      a wild and wonderful task, based on servlets and
      JSP pages.  It was written by WS
    </description>


    <!-- Context initialization parameters that define shared
         String constants used within your application, which
         can be customized by the system administrator who is
         installing your application.  The values actually
         assigned to these parameters can be retrieved in a
         servlet or JSP page by calling:

             String value =
               getServletContext().getInitParameter("name");

         where "name" matches the <param-name> element of
         one of these initialization parameters.

         You can define any number of context initialization
         parameters, including zero.
    -->

<!-- No parameters for now  WS
    <context-param>
      <param-name>webmaster</param-name>
      <param-value>myaddress@mycompany.com</param-value>
      <description>
        The EMAIL address of the administrator to whom questions
        and comments about this application should be addressed.
      </description>
    </context-param>
 -->

    <!-- Servlet definitions for the servlets that make up
         your web application, including initialization
         parameters.  With Tomcat, you can also send requests
         to servlets not listed here with a request like this:

           http://localhost:8080/{context-path}/servlet/{classname}

         but this usage is not guaranteed to be portable.  It also
         makes relative references to images and other resources
         required by your servlet more complicated, so defining
         all of your servlets (and defining a mapping to them with
         a servlet-mapping element) is recommended.

         Servlet initialization parameters can be retrieved in a
         servlet or JSP page by calling:

             String value =
               getServletConfig().getInitParameter("name");

         where "name" matches the <param-name> element of
         one of these initialization parameters.

         You can define any number of servlets, including zero.
    -->

    <servlet>
      <servlet-name>RHUserLogin</servlet-name>
      <description>
        The User Menu
      </description>
      <servlet-class>RoseHill.RHUserLogin</servlet-class>
      <load-on-startup>5</load-on-startup>
    </servlet>
    <servlet>
      <servlet-name>RHLogout</servlet-name>
      <description>
        The User Menu
      </description>
      <servlet-class>RoseHill.RHLogout</servlet-class>
      <load-on-startup>5</load-on-startup>
    </servlet>

    <servlet>
      <servlet-name>RHUserMenu</servlet-name>
      <description>
        The User Menu
      </description>
      <servlet-class>RoseHill.RHUserMenu</servlet-class>
    </servlet>

    <servlet>
      <servlet-name>RHAdminLogin</servlet-name>
      <description>
        The User Menu
      </description>
      <servlet-class>RoseHill.RHAdminLogin</servlet-class>
    </servlet>

    <servlet>
      <servlet-name>RHAdminMenu</servlet-name>
      <description>
        The User Menu
      </description>
      <servlet-class>RoseHill.RHAdminMenu</servlet-class>
    </servlet>

    <servlet>
      <servlet-name>RHAddUser</servlet-name>
      <description>
        The User Menu
      </description>
      <servlet-class>RoseHill.RHAddUser</servlet-class>
    </servlet>

    <servlet>
      <servlet-name>RHDeleteUser</servlet-name>
      <description>
        The User Menu
      </description>
      <servlet-class>RoseHill.RHDeleteUser</servlet-class>
    </servlet>

    <servlet>
      <servlet-name>Deed</servlet-name>
      <description>
      Add new records
      </description>
      <servlet-class>RoseHill.Deed</servlet-class>
    </servlet>

    <servlet>
      <servlet-name>DeedBrowse</servlet-name>
      <description>
      Add new records
      </description>
      <servlet-class>RoseHill.DeedBrowse</servlet-class>
    </servlet>

    <servlet>
      <servlet-name>DeedZoom</servlet-name>
      <description>
      Add new records
      </description>
      <servlet-class>RoseHill.DeedZoom</servlet-class>
    </servlet>

    <servlet>
      <servlet-name>Rose</servlet-name>
      <description>
      Add new records
      </description>
      <servlet-class>RoseHill.Rose</servlet-class>
    </servlet>
    <servlet>
      <servlet-name>RoseBrowse</servlet-name>
      <description>
      Add new records
      </description>
      <servlet-class>RoseHill.RoseBrowse</servlet-class>
    </servlet>

    <servlet>
      <servlet-name>RoseZoom</servlet-name>
      <description>
      Add new records
      </description>
      <servlet-class>RoseHill.RoseZoom</servlet-class>
    </servlet>
    <servlet>
      <servlet-name>showImage</servlet-name>
      <description>
      Add new records
      </description>
      <servlet-class>RoseHill.showImage</servlet-class>
    </servlet>
    <!-- Define mappings that are used by the servlet container to
         translate a particular request URI (context-relative) to a
         particular servlet.  The examples below correspond to the
         servlet descriptions above.  Thus, a request URI like:

           http://localhost:8080/{contextpath}/graph

         will be mapped to the "graph" servlet, while a request like:

           http://localhost:8080/{contextpath}/saveCustomer.do

         will be mapped to the "controller" servlet.

         You may define any number of servlet mappings, including zero.
         It is also legal to define more than one mapping for the same
         servlet, if you wish to.
    -->

    <servlet-mapping>
      <servlet-name>Deed</servlet-name>
      <url-pattern>/Deed</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
      <servlet-name>DeedBrowse</servlet-name>
      <url-pattern>/DeedBrowse</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
      <servlet-name>DeedZoom</servlet-name>
      <url-pattern>/DeedZoom</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
      <servlet-name>Rose</servlet-name>
      <url-pattern>/Rose</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
      <servlet-name>RoseBrowse</servlet-name>
      <url-pattern>/RoseBrowse</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
      <servlet-name>RoseZoom</servlet-name>
      <url-pattern>/RoseZoom</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
      <servlet-name>RHUserLogin</servlet-name>
      <url-pattern>/RHUserLogin</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
      <servlet-name>RHUserMenu</servlet-name>
      <url-pattern>/RHUserMenu</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
      <servlet-name>RHLogout</servlet-name>
      <url-pattern>/RHLogout</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
      <servlet-name>RHAdminLogin</servlet-name>
      <url-pattern>/AHAdminLogin</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
      <servlet-name>RHAdminMenu</servlet-name>
      <url-pattern>/AHAdminMenu</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
      <servlet-name>RHAddUser</servlet-name>
      <url-pattern>/RHAddUser</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
      <servlet-name>RHDeleteUser</servlet-name>
      <url-pattern>/RHDeleteUser</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
      <servlet-name>showImage</servlet-name>
      <url-pattern>/showImage</url-pattern>
    </servlet-mapping>
   <!--
    <servlet-mapping>
      <servlet-name>graph</servlet-name>
      <url-pattern>/graph</url-pattern>
    </servlet-mapping>
    -->

    <!-- Define the default session timeout for your application,
         in minutes.  From a servlet or JSP page, you can modify
         the timeout for a particular session dynamically by using
         HttpSession.getMaxInactiveInterval(). -->

    <session-config>
      <session-timeout>120</session-timeout>    <!-- 120 minutes -->
    </session-config>


</web-app>
